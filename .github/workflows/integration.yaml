# üèÉ‚Äç‚ôÄÔ∏è Continuous Integration and Delivery
# =======================================
#
# This is a GitHub Action workflow that provides Continuous Integration (CI)
# and Continuous Delivery (CD) of the PDS_ Deep Archive software. Currently
# it generates installable packages and publishes documentation, but in the
# future it could also run unit+integration+functional tests, save other
# artifacts, and so forth.
#
# Access Tokens
# -------------
#
# The following tokens must be installed in the project's GitHub repository
# in ordr for this workflow to function:
#
# ``github_personal_access_token``
#     A personal access token of a user with collaborator or better access to
#     the project repository. You can generate this by visiting GitHub ‚Üí
#     Settings ‚Üí Developer settings ‚Üí Personal access tokens ‚Üí Generate new
#     token. Give the token scope on ``repo``.
# ``pypi_upload_token``
#     An API token for the Python Package Index. You can make one by visiting
#     pypi.org and choosing Account Settings ‚Üí Add API Token. It's best to
#     narrow the scope of the token to just one PyPI project, but that's only
#     available for projects already hosted on PyPI.
#  ``test_pypi_upload_token``
#     The same, but for test.pypi.org.
#
#
# .. _PDS: https://pds.nasa.gov/


---

name: üì¶ Continuous Integration & Delivery


# Driving Event
# -------------
#
# What event starts this workflow: a push. We could refine this to a specific
# branch, except that we detect if we're pushing to a release tag in the flow
# and can publish to the official PyPI in addition to the test PyPI. (We
# always publish to the test PyPI.)

on: push


# What to Do
# ----------
#
# Once we get the event, what shall we do? Two things:
# ‚Ä¢ Generate and publish documentation to the web
# ‚Ä¢ Make an installable package
#   ‚Ä¢ Always auto-publish to test.pypi.org
#   ‚Ä¢ For tagged releases, auto-publish to the official pypi.org

jobs:
    documentation:
        name: üìÑ Documentation
        runs-on: ubuntu-latest
        steps:
            -
                name: ‚öôÔ∏è Checking out repository
                uses: actions/checkout@v2
            -
                name: üêç Installing Python
                uses: actions/setup-python@v1
                with:
                    python-version: '3.x'
                    architecture: 'x64'
            -
                name: üöº Adding dependencies
                run: |
                    sudo apt-get update && sudo apt-get install -y libxml2-dev libxslt1-dev
            -
                name: üñã Writing documentation
                run: |
                    python3 bootstrap.py
                    bin/buildout
                    bin/docbuilder
            -
                name: üìí Publishing to GitHub Pages
                if: success()
                uses: crazy-max/ghaction-github-pages@v1
                env:
                    GITHUB_PAT: ${{secrets.github_personal_access_token}}
                with:
                    target_branch: gh-pages
                    build_dir: build/docs/html
            # the changelog will be available on https://nasa-pds.github.io/<your repo>/pdsen-corral/CHANGELOG
            - uses: actions/checkout@v2
              with:
                ref: gh-pages
            - name: Create requirements report for stable release
              run: |
                  pip install pds-github-util
                  echo ::set-env name=REQUIREMENT_FILE::$(requirement-report --organization NASA-PDS --repository pds-deep-archive --token ${{ secrets.GITHUB_TOKEN }} --output pdsen-corral)
                  echo "{{ env.REQUIREMENT_FILE }} generated"
                  echo ::set-env name=REQUIREMENT_HTML=$(echo {{ env.REQUIREMENT_FILE }} | sed s/\.md/\.html/g)
              if: startsWith(github.event.ref, 'refs/tags')
            - name: Create requirements report for dev
              run: |
                pip install pds-github-util
                echo ::set-env name=REQUIREMENT_FILE::$(requirement-report --organization NASA-PDS --repository pds-deep-archive --token ${{ secrets.GITHUB_TOKEN }} --output pdsen-corral --dev)
                echo "{{ env.REQUIREMENT_FILE }} generated"
                echo ::set-env name=REQUIREMENT_HTML=$(echo {{ env.REQUIREMENT_FILE }} | sed s/\.md/\.html/g)
              if: ! (startsWith(github.event.ref, 'refs/tags'))
            - uses: docker://pandoc/core:2.9
              with:
                args: --standalone -f markdown -t html --output=${{ env.REQUIREMENT_HTML}} ${{ env.REQUIREMENT_FILE}}
            - name: Create changelog
              run: |
                sudo gem install github_changelog_generator
                github_changelog_generator --user NASA-PDS --project pds-deep-archive --output pdsen-corral/CHANGELOG.md --token ${{ secrets.GITHUB_TOKEN }} --configure-sections '{"improvements":{"prefix":"**Improvements:**","labels":["enhancement"]},"defects":{"prefix":"**Defects:**","labels":["bug"]},"deprecations":{"prefix":"**Deprecations:**","labels":["deprecation"]}}' --no-pull-requests
            # convert markdown file to html because jekyll is disabled in this repository
            - uses: docker://pandoc/core:2.9
              with:
                  args: --standalone -f markdown -t html --output=CHANGELOG.html CHANGELOG.md
            - name: Commit CHANGELOG.md and requirement files
              run: |
                git config --local user.email "action@github.com"
                git config --local user.name "GitHub Action"
                echo "commit pdsen-corral/CHANGELOG.md and ${{ env.REQUIREMENT_FILE }}on gh-pages branch"
                git add pdsen-corral/CHANGELOG.md pdsen-corral/CHANGELOG.html ${{ env.REQUIREMENT_FILE }} ${{ env.REQUIREMENT_HTML}}
                git commit -m "update changelog and requirements" --allow-empty
            - name: Push changes
              uses: ad-m/github-push-action@master
              with:
                github_token: ${{ secrets.GITHUB_TOKEN }}
                branch: gh-pages

    packaging:
        name: üì¶ Packaging
        runs-on: ubuntu-latest
        steps:
            -
                name: ‚öôÔ∏è Checking out repository
                uses: actions/checkout@v2
            -
                name: üêç Installing Python
                uses: actions/setup-python@v1
                with:
                    python-version: '3.x'
                    architecture: 'x64'
            -
                name: üöº Adding dependencies
                run: |
                    sudo apt-get update && sudo apt-get install -y libxml2-dev libxslt1-dev
            -
                name: üíΩ Building & testing distribution
                run: |
                    rm -rf dist proddist testdist
                    python3 bootstrap.py
                    bin/buildout
                    bin/test
                    bin/buildout setup . egg_info --tag-build $(date --utc '+%Y%m%d%H%M%S')  sdist --dist-dir testdist
                    bin/buildout setup . sdist --dist-dir proddist
            -
                name: üìá Publishing to Test PyPI
                uses: pypa/gh-action-pypi-publish@master
                with:
                    password: ${{secrets.test_pypi_upload_token}}
                    repository_url: https://test.pypi.org/legacy/
                    packages_dir: testdist/
            -
                name: üóÇ Publishing to PyPI
                uses: pypa/gh-action-pypi-publish@master
                if: startsWith(github.event.ref, 'refs/tags')
                with:
                    password: ${{secrets.pypi_upload_token}}
                    packages_dir: proddist/

...
